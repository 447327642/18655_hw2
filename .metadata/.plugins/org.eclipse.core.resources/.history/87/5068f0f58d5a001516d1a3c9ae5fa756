package xml_parse;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;


import db_Util.DBManager;

public class XMLParser {
	public static void main(String[] args) throws Exception {
		//Get the DOM Builder Factory
		DocumentBuilderFactory factory = 
				DocumentBuilderFactory.newInstance();

		//Get the DOM Builder
		DocumentBuilder builder = factory.newDocumentBuilder();

		//Load and Parse the XML document
		//document contains the complete XML as a Tree.

		Document document = 
				builder.parse(ClassLoader.getSystemResourceAsStream("processed_dblp.xml"));

		List<Publication> pubList = new ArrayList<Publication>();
		List<Author> authorList = new ArrayList<Author>();

		//Iterating through the nodes and extracting the data.
		NodeList nodeList = document.getDocumentElement().getChildNodes();

		for (int i = 0; i < nodeList.getLength(); i++) {

			Node node = nodeList.item(i);
			if (node instanceof Element) {
				Publication pub = new Publication();
				//get the type of publicaiton
				pub.type = node.getNodeName();

				//get key value of publication
				pub.key = node.getAttributes().
						getNamedItem("key").getNodeValue();

				NodeList childNodes = node.getChildNodes();
				for (int j = 0; j < childNodes.getLength(); j++) {
					Node cNode = childNodes.item(j);

					//Identifying the child tag of article encountered. 
					if (cNode instanceof Element) {
						String content = cNode.getLastChild().
								getTextContent().trim();
						switch (cNode.getNodeName()) {
						case "author":
							NodeList authorNodes = cNode.getChildNodes();
							for(int k = 0; k < authorNodes.getLength(); k++){
								Node aNode = authorNodes.item(k);
								pub.author.add(aNode.getTextContent().trim());
							}
							break;
						case "editor":
							pub.editor = content;
							break;
						case "title":
							pub.title = content;
							break;
						case "booktitle":
							pub.booktitle = content;
							break;
						case "pages":
							pub.pages = content;
							break;            
						case "year":
							pub.year = content;
							break;
						case "address":
							pub.address = content;
							break;
						case "volume":
							pub.volume = content;
							break;
						case "journal":
							pub.journal = content;
							break;
						case "number":
							pub.number = content;
							break;
						case "month":
							pub.month = content;
							break;
						case "url":
							pub.url = content;
							break;
						case "ee":
							pub.ee = content;
							break;
						case "cdrom":
							pub.cdrom = content;
							break;
						case "publisher":
							pub.publisher = content;
							break;
						case "note":
							pub.note = content;
							break;
						case "crossref":
							pub.crossref = content;
							break;
						case "isbn":
							pub.isbn = content;
							break;
						case "series":
							pub.series = content;
							break;
						case "school":
							pub.school = content;
							break;
						case "chapter":
							pub.chapter = content;

						}
					}
				}
				pubList.add(pub);
				for(int l=0; l<pub.author.size(); l++){
					authorList.add(new Author(pub.author.get(l),pub.key));
				}	      
			}

		}

		//test print publicaiton  and author list populated.
		for (Publication pub : pubList) {
			System.out.println(pub.author);
		}
		for(Author a : authorList){
			System.out.println(a.author);	    	
			System.out.println(a.pubKey);

		}

		//Store publication and author list into Mysql database

		DBManager manager= new DBManager();
		Connection conn = manager.connect();
		Statement stmt = conn.createStatement();
		String sql1 = "DROP DATABASE IF EXISTS dblp;";
		String sql2 = "CREATE DATABASE dblp;";
		String sql3 = "USE dblp;";
		String createPubTable1 = "DROP TABLE IF EXISTS publication;";
		String createPubTable2 = "CREATE TABLE publication (id VARCHAR(100) PRIMARY KEY NOT NULL,"+
				"title  VARCHAR(500) NOT NULL,"+
				"author VARCHAR(500) NOT NULL,"+
				"type VARCHAR(50) NOT NULL,"+
				"editor VARCHAR(100),"+
				"pages VARCHAR(50),"+
				"year VARCHAR(50),"+
				"volume VARCHAR(50),"+
				"journal VARCHAR(500),"+
				"number VARCHAR(50),"+
				"url VARCHAR(500),"+
				"ee VARCHAR(500),"+
				"cdrom VARCHAR(100),"+
				"publisher VARCHAR(100),"+
				"booktitle VARCHAR(100),"+
				"crossref VARCHAR(100),"+
				"address VARCHAR(100),"+
				"isbn VARCHAR(100),"+
				"series VARCHAR(100),"+
				"school VARCHAR(100),"+
				"chapter VARCHAR(100));";
		stmt.addBatch(sql1);
		stmt.addBatch(sql2);
		stmt.addBatch(sql3);
		stmt.addBatch(createPubTable1);
		//stmt.addBatch(createPubTable2);
		stmt.executeBatch();
		stmt.executeUpdate(createPubTable2);

		//insert publication
		for (int m=0; m<pubList.size(); m++){
			String temp = "";
			Publication pub = pubList.get(m);
			if(pub.author.size()>1){
				for (String s : pub.author){
					temp = temp.concat(s+",");
				}
				temp=temp.substring(0,temp.length()-1);
			}else{
				temp = pub.author.get(0);
			}

			String sql = "INSERT INTO publication (id,title,author,type,editor,pages,year,volume,journal,number,url,ee,cdrom,publisher,booktitle,crossref,address,isbn,series,school,chapter)"+
					"VALUES(\""+ pub.key +"\","+
					"\""+ pub.title +"\","+
					"\" "+ temp +"\","+
					"\" "+ pub.type +"\","+
					"\" " +pub.editor +"\","+
					"\" "+ pub.pages +"\","+
					"\" "+ pub.year +"\","+
					"\" "+ pub.volume +"\","+
					"\" "+ pub.journal +"\","+
					"\" "+ pub.number +"\","+
					"\" "+ pub.url +"\","+
					"\" "+ pub.ee +"\","+
					"\" "+ pub.cdrom +"\","+
					"\" "+ pub.publisher +"\","+
					"\" "+ pub.booktitle +"\","+
					"\" "+ pub.crossref +"\","+
					"\" "+ pub.address +"\","+
					"\" "+ pub.isbn +"\","+
					"\" "+ pub.series +"\","+
					"\" "+ pub.school +"\","+
					"\" "+ pub.chapter +"\");";
			System.out.println(sql);
			stmt.executeUpdate(sql);
		}

	}

}
